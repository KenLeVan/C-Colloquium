/*

I.
    Constructor
        it is a special class's methood() that is called automatically when you create a new object of that class. It has the same name as the class, but doesnt have a return datatype.
        The goal of the constructor is to initialize all class's variables of the new object

        a class can have multiple constructors with different arguments. Even if the class didnt declared a single constuctor, compiler would give it a default consturctor 

        if can also have a list of members to initialize after ':'
            class MyClass {
                public:
                    int w;
                    int h;

                    MyClass : width(w), height(h) {
                        std::cout << width << ' ' << height << std::endl;
                    }
            };

        Although you may noy create a constructor and still get the same result, there is a crucial difference
            1) initialization vs assignment
                list of initializations initialize data when the object is created

                assignment in constructor means that the data is initialized by default and only then the constructor assign it a value
            2) effectiveness
                for the data, which is an object of a class list of initializations allow call the constructor only once it is initialized
                When you assign objects in the constructor the consturctor is called and then operation for assingment is done, which is slower
            3) for some data it is needed
                const variables must be initialized in a list of initializations, you cannot assing them in a constructor
                addresses& also must be initialized in a list of initializations
                if your class is a subclass of a base class, which doesnt have a consturctor, your class must initialize base class in a list of initializations

        There are different types of constructors
            1) default constructor (all arguments are default or there are no arguments at all)
                Explicit definition (when you yourself decide to use default arguments or no arguments)
                Implicit definition is generated by the compilor
            2) parameterized constructor
                constructor, which uses one or more arguments (pretty trivial)
            3) copy constuctor
                it is a special tool, which is used for creationg a new object as a copy of an already existing objects of the same class. It uses an address& to the const T& of the same class as an argument
                Compiler automatically generates copy constructor by default (if you didnt declare it) it also does shallow copy (copy bit by bit) of data from the old object to the new one (for simple classes this is enough)
                However, if your class uses dynamic memory you have to declare your own deep copy constructor, which will allocate new memory for the copy
            4) move constructor
                constructor that uses for the creation of new object a move of resources from temporary (rvalue) objects as opposed to copying them
            5) converting constructor
                this constructor with arguments, where one argument is defined and all other are default, also which does not have a key word explicit can convert explicitly object argument into object of the same class
            6) delegating constructor
                it is a such constructor that in its list of initializations uses a constructor of the same class. The call constructor is called a target constructor
                the idea of delegating constructors if to avoid repeating code segments to initialize again, so instead of repeating the code in each of the constructors you write a single consturctor and use if for the others
                RULES:
                    You have to write a target constructor as the first argument
                    The body of the delegating constructor activates only after the target's constructor work is done
                    Delegating constructor cannot initialize data in its own list of initializations
        The sequnce of constructors
            1) constructors for base classes
            2) member object constructors
            3) derived class constructor body
*/

#include <iostream>

// in this class i will use parameterized constructor with the use of list of initializations
class Point
{
public:
    int x;
    int y;

    Point(int xCord, int yCord) : x(xCord), y(yCord)
    {
        std::cout << "x:" << xCord << std::endl
        << "y: " << yCord << std::endl;
    }
};

// in this class i will show why explicit is important
class ExplicitTest
{
public:
    int x;

    // constructor to this class with exmplicit key word
    explicit ExplicitTest(int x) : x(x)
    {
        std::cout << "construction is done!";
    }

    void print() const
    {
        std::cout << x << std::endl;
    }
};

// =default is used to explicitely ask compiler to generate default constructor
// it increases code readability
// in some cases it will be more effective as compiler will create a more omptimized code
class DefaultClass
{
public:
    DefaultClass() = default;
};

// in this class i will use delegating constructor
class Rectangle
{
public:
    int width;
    int height;

    Rectangle(int w, int h) : width(w), height(h)
    {
        std::cout << "rectangle initialization" << std::endl;
    }

    Rectangle(int side) : Rectangle(side, side)
    {
        std::cout << "delegating constructor is used" << std::endl;
    }
};

void printMyClass(const ExplicitTest& val)
{
    val.print();
}

int main()
{
    ExplicitTest a(1); // explicit act of creation
    // printMyClass(20); // compile error as 20 is converted to a class datatype
    printMyClass(ExplicitTest(20)); // ok

    return 0;
}